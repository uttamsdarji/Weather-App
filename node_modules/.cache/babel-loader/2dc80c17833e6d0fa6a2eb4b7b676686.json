{"ast":null,"code":"import React from 'react';\n\nclass WeatherData extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getMyLocation = () => {\n      let location = null;\n      let latitude = null;\n      let longitude = null;\n\n      if (window.navigator && window.navigator.geolocation) {\n        location = window.navigator.geolocation;\n      }\n\n      if (location) {\n        location.getCurrentPosition(function (position) {\n          latitude = position.coords.latitude;\n          longitude = position.coords.longitude;\n        });\n        return {\n          latitude: latitude,\n          longitude: longitude\n        };\n      }\n    };\n\n    this.newData = data => {\n      this.props.newData(data);\n    };\n\n    this.fetchDataByGeo = (latitude, longitude) => {\n      const url = 'https://api.openweathermap.org/data/2.5/weather?lat=' + latitude + '&lon=' + longitude + '&appid=9b32cf97b04c03ad2e6f0960ea7bdce3';\n      fetch(url).then(results => results.json()).then(wdata => {\n        this.newData(wdata);\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.latitude !== null && this.props.longitude !== null) {\n      this.fetchDataByGeo(this.props.latitude, this.props.longitude);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.latitude !== prevProps.latitude || this.props.longitude !== prevProps.longitude) {\n      this.fetchDataByGeo(this.props.latitude, this.props.longitude);\n    }\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexport default WeatherData;","map":{"version":3,"sources":["/Users/uttamdarji/Desktop/weather/src/components/WeatherData/WeatherData.js"],"names":["React","WeatherData","Component","getMyLocation","location","latitude","longitude","window","navigator","geolocation","getCurrentPosition","position","coords","newData","data","props","fetchDataByGeo","url","fetch","then","results","json","wdata","componentDidMount","componentDidUpdate","prevProps","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AAAA;AAAA;;AAAA,SAKxCC,aALwC,GAKxB,MAAM;AACpB,UAAIC,QAAQ,GAAG,IAAf;AACA,UAAIC,QAAQ,GAAG,IAAf;AACA,UAAIC,SAAS,GAAG,IAAhB;;AACA,UAAIC,MAAM,CAACC,SAAP,IAAoBD,MAAM,CAACC,SAAP,CAAiBC,WAAzC,EAAsD;AACpDL,QAAAA,QAAQ,GAAGG,MAAM,CAACC,SAAP,CAAiBC,WAA5B;AACD;;AACD,UAAIL,QAAJ,EAAa;AACXA,QAAAA,QAAQ,CAACM,kBAAT,CAA4B,UAAUC,QAAV,EAAoB;AAC9CN,UAAAA,QAAQ,GAAIM,QAAQ,CAACC,MAAT,CAAgBP,QAA5B;AACAC,UAAAA,SAAS,GAAIK,QAAQ,CAACC,MAAT,CAAgBN,SAA7B;AACD,SAHD;AAIA,eAAQ;AACND,UAAAA,QAAQ,EAAEA,QADJ;AAENC,UAAAA,SAAS,EAAEA;AAFL,SAAR;AAID;AACF,KAtBuC;;AAAA,SAkCxCO,OAlCwC,GAkC7BC,IAAD,IAAU;AAClB,WAAKC,KAAL,CAAWF,OAAX,CAAmBC,IAAnB;AACD,KApCuC;;AAAA,SAsCxCE,cAtCwC,GAsCvB,CAACX,QAAD,EAAUC,SAAV,KAAwB;AACvC,YAAMW,GAAG,GAAG,yDAAyDZ,QAAzD,GAAoE,OAApE,GAA8EC,SAA9E,GAA0F,yCAAtG;AACAY,MAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,OAAO,IAAIA,OAAO,CAACC,IAAR,EADjB,EAECF,IAFD,CAEOG,KAAD,IAAW;AACf,aAAKT,OAAL,CAAaS,KAAb;AACD,OAJD;AAKD,KA7CuC;AAAA;;AA+CxCC,EAAAA,iBAAiB,GAAG;AAClB,QAAG,KAAKR,KAAL,CAAWV,QAAX,KAAsB,IAAtB,IAA8B,KAAKU,KAAL,CAAWT,SAAX,KAAuB,IAAxD,EAA6D;AAC3D,WAAKU,cAAL,CAAoB,KAAKD,KAAL,CAAWV,QAA/B,EAAwC,KAAKU,KAAL,CAAWT,SAAnD;AACD;AACF;;AAGDkB,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKV,KAAL,CAAWV,QAAX,KAAwBoB,SAAS,CAACpB,QAAlC,IAA8C,KAAKU,KAAL,CAAWT,SAAX,KAAyBmB,SAAS,CAACnB,SAArF,EAAgG;AAC9F,WAAKU,cAAL,CAAoB,KAAKD,KAAL,CAAWV,QAA/B,EAAwC,KAAKU,KAAL,CAAWT,SAAnD;AACD;AACF;;AAEDoB,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AA9DuC;;AAiE1C,eAAezB,WAAf","sourcesContent":["import React from 'react';\n\nclass WeatherData extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  getMyLocation = () => {\n    let location = null;\n    let latitude = null;\n    let longitude = null;\n    if (window.navigator && window.navigator.geolocation) {\n      location = window.navigator.geolocation\n    }\n    if (location){\n      location.getCurrentPosition(function (position) {\n        latitude = (position.coords.latitude);\n        longitude = (position.coords.longitude);\n      });\n      return ({\n        latitude: latitude,\n        longitude: longitude\n      });\n    }        \n  }\n\n\n  // fetchDataByZip = (zipCode,countryCode) => {\n  //   const url = 'https://api.openweathermap.org/data/2.5/weather?zip=' + zipCode + ',' + countryCode + '&appid=9b32cf97b04c03ad2e6f0960ea7bdce3';\n  //   fetch(url)\n  //   .then(results => results.json())\n  //   .then((wdata) => {\n  //     this.newData(wdata);\n  //   });\n  // }\n\n  newData = (data) => {\n    this.props.newData(data);\n  }\n\n  fetchDataByGeo = (latitude,longitude) => {\n    const url = 'https://api.openweathermap.org/data/2.5/weather?lat=' + latitude + '&lon=' + longitude + '&appid=9b32cf97b04c03ad2e6f0960ea7bdce3';\n    fetch(url)\n    .then(results => results.json())\n    .then((wdata) => {\n      this.newData(wdata);\n    });\n  }\n\n  componentDidMount() {\n    if(this.props.latitude!==null && this.props.longitude!==null){\n      this.fetchDataByGeo(this.props.latitude,this.props.longitude);\n    }\n  }\n \n\n  componentDidUpdate(prevProps) {\n    if (this.props.latitude !== prevProps.latitude || this.props.longitude !== prevProps.longitude) {\n      this.fetchDataByGeo(this.props.latitude,this.props.longitude);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default WeatherData;"]},"metadata":{},"sourceType":"module"}