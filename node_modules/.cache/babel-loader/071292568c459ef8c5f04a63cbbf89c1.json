{"ast":null,"code":"var _jsxFileName = \"/Users/uttamdarji/Desktop/weather/src/components/Clock.js\";\nimport React from 'react';\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.tick = timezone => {\n      this.setState({\n        date: this.getTime(timezone)\n      });\n    };\n\n    this.getTime = offset => {\n      let d = new Date();\n      let localTime = d.getTime();\n      let localOffset = d.getTimezoneOffset() * 60000; // obtain UTC time in msec\n\n      let utc = localTime + localOffset; // create new Date object for different city\n      // using supplied offset\n\n      let nd = new Date(utc + 1000 * offset);\n\n      if (nd.getHours() > 18 || nd.getHours() >= 0 && nd.getHours() <= 4) {\n        this.props.day_Night('n');\n      } else {\n        this.props.day_Night('d');\n      }\n\n      return nd;\n    };\n\n    this.state = {\n      date: new Date()\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(this.props.data.timezone), 1000);\n  }\n\n  render() {\n    let hours = this.state.date.getHours();\n    let minutes = this.state.date.getMinutes();\n    let seconds = this.state.date.getSeconds();\n\n    if (minutes < 10) {\n      minutes = '0' + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = '0' + seconds;\n    }\n\n    let ampm = 'am';\n\n    if (hours > 12) {\n      hours = hours - 12;\n      ampm = 'pm';\n    } else if (hours === 0) {\n      hours = 12;\n      ampm = 'am';\n    } else if (hours === 12) {\n      ampm = 'pm';\n    }\n\n    if (this.props.data.main) {\n      return React.createElement(\"div\", {\n        className: \"clock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, hours, \":\", minutes, \":\", seconds, \" \", ampm));\n    } else return null;\n  }\n\n}\n\nexport default Clock;","map":{"version":3,"sources":["/Users/uttamdarji/Desktop/weather/src/components/Clock.js"],"names":["React","Clock","Component","constructor","props","tick","timezone","setState","date","getTime","offset","d","Date","localTime","localOffset","getTimezoneOffset","utc","nd","getHours","day_Night","state","componentDidMount","timerID","setInterval","data","render","hours","minutes","getMinutes","seconds","getSeconds","ampm","main"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAMnBC,IANmB,GAMXC,QAAD,IAAc;AACnB,WAAKC,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAE,KAAKC,OAAL,CAAaH,QAAb;AADM,OAAd;AAGD,KAVkB;;AAAA,SAWnBG,OAXmB,GAWRC,MAAD,IAAY;AACpB,UAAIC,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACA,UAAIC,SAAS,GAAGF,CAAC,CAACF,OAAF,EAAhB;AACA,UAAIK,WAAW,GAAGH,CAAC,CAACI,iBAAF,KAAwB,KAA1C,CAHoB,CAKpB;;AACA,UAAIC,GAAG,GAAGH,SAAS,GAAGC,WAAtB,CANoB,CAOpB;AACA;;AACA,UAAIG,EAAE,GAAG,IAAIL,IAAJ,CAASI,GAAG,GAAI,OAAKN,MAArB,CAAT;;AACA,UAAGO,EAAE,CAACC,QAAH,KAAc,EAAd,IAAqBD,EAAE,CAACC,QAAH,MAAe,CAAf,IAAoBD,EAAE,CAACC,QAAH,MAAe,CAA3D,EAA+D;AAC7D,aAAKd,KAAL,CAAWe,SAAX,CAAqB,GAArB;AACD,OAFD,MAEO;AACL,aAAKf,KAAL,CAAWe,SAAX,CAAqB,GAArB;AACD;;AACD,aAAOF,EAAP;AACD,KA3BkB;;AAEjB,SAAKG,KAAL,GAAa;AACXZ,MAAAA,IAAI,EAAE,IAAII,IAAJ;AADK,KAAb;AAGD;;AAwBDS,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,OAAL,GAAeC,WAAW,CACxB,MAAM,KAAKlB,IAAL,CAAU,KAAKD,KAAL,CAAWoB,IAAX,CAAgBlB,QAA1B,CADkB,EAExB,IAFwB,CAA1B;AAID;;AAEDmB,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAG,KAAKN,KAAL,CAAWZ,IAAX,CAAgBU,QAAhB,EAAZ;AACA,QAAIS,OAAO,GAAG,KAAKP,KAAL,CAAWZ,IAAX,CAAgBoB,UAAhB,EAAd;AACA,QAAIC,OAAO,GAAG,KAAKT,KAAL,CAAWZ,IAAX,CAAgBsB,UAAhB,EAAd;;AACA,QAAIH,OAAO,GAAG,EAAd,EAAkB;AACdA,MAAAA,OAAO,GAAG,MAAMA,OAAhB;AACH;;AACD,QAAIE,OAAO,GAAG,EAAd,EAAkB;AAChBA,MAAAA,OAAO,GAAG,MAAMA,OAAhB;AACD;;AACD,QAAIE,IAAI,GAAG,IAAX;;AACA,QAAIL,KAAK,GAAG,EAAZ,EAAgB;AACZA,MAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACAK,MAAAA,IAAI,GAAG,IAAP;AACH,KAHD,MAGO,IAAIL,KAAK,KAAK,CAAd,EAAiB;AACpBA,MAAAA,KAAK,GAAG,EAAR;AACAK,MAAAA,IAAI,GAAG,IAAP;AACH,KAHM,MAGA,IAAIL,KAAK,KAAK,EAAd,EAAkB;AACrBK,MAAAA,IAAI,GAAG,IAAP;AACH;;AACD,QAAG,KAAK3B,KAAL,CAAWoB,IAAX,CAAgBQ,IAAnB,EAAyB;AACvB,aACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKN,KAAL,OAAaC,OAAb,OAAuBE,OAAvB,OAAiCE,IAAjC,CADF,CADF;AAKD,KAND,MAMO,OAAO,IAAP;AACR;;AAhEiC;;AAmEpC,eAAe9B,KAAf","sourcesContent":["import React from 'react';\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n    };\n  }\n  tick = (timezone) => {\n    this.setState({\n      date: this.getTime(timezone),\n    });\n  }\n  getTime = (offset) => {\n    let d = new Date();\n    let localTime = d.getTime();\n    let localOffset = d.getTimezoneOffset() * 60000;\n\n    // obtain UTC time in msec\n    let utc = localTime + localOffset;\n    // create new Date object for different city\n    // using supplied offset\n    let nd = new Date(utc + (1000*offset));\n    if(nd.getHours()>18 || (nd.getHours()>=0 && nd.getHours()<=4)) {\n      this.props.day_Night('n');\n    } else {\n      this.props.day_Night('d');\n    }\n    return nd;\n  };\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(this.props.data.timezone),\n      1000\n    );\n  }\n\n  render() {\n    let hours = this.state.date.getHours();\n    let minutes = this.state.date.getMinutes();\n    let seconds = this.state.date.getSeconds();\n    if (minutes < 10) {\n        minutes = '0' + minutes;\n    }\n    if (seconds < 10) {\n      seconds = '0' + seconds;\n    }\n    let ampm = 'am';\n    if (hours > 12) {\n        hours = hours - 12;\n        ampm = 'pm';\n    } else if (hours === 0) {\n        hours = 12;\n        ampm = 'am'\n    } else if (hours === 12) {\n        ampm = 'pm'\n    }\n    if(this.props.data.main) {\n      return (\n        <div className=\"clock\">\n          <h2>{hours}:{minutes}:{seconds} {ampm}</h2>\n        </div>\n      );\n    } else return null;\n  }\n}\n\nexport default Clock;"]},"metadata":{},"sourceType":"module"}