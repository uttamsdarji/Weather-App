{"ast":null,"code":"import React from 'react';\nlet location, latitude, longitude;\n\nclass WeatherData extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setLatLong = () => {\n      this.props.setLatLong(latitude, longitude);\n      console.log(typeof this.props.latitude);\n    };\n\n    this.getMyLocation = () => {\n      // let location = null;\n      // let latitude = null;\n      // let longitude = null;\n      if (window.navigator && window.navigator.geolocation) {\n        location = window.navigator.geolocation;\n      }\n\n      if (location) {\n        location.getCurrentPosition(function (position) {\n          latitude = position.coords.latitude;\n          longitude = position.coords.longitude;\n          console.log(latitude);\n          console.log(longitude);\n        });\n        return {\n          latitude: latitude,\n          longitude: longitude\n        };\n      } //this.props.setLatLong(latitude,longitude);        \n\n    };\n\n    this.newData = data => {\n      this.props.newData(data);\n    };\n\n    this.fetchDataByGeo = (latitude, longitude) => {\n      const url = 'https://api.openweathermap.org/data/2.5/weather?lat=' + latitude + '&lon=' + longitude + '&appid=9b32cf97b04c03ad2e6f0960ea7bdce3';\n      fetch(url).then(results => results.json()).then(wdata => {\n        this.newData(wdata);\n      });\n    };\n\n    this.setLatLong(); //this.getMyLocation();\n    // this.latitude = this.getMyLocation().latitude;\n    // this.longitude = this.getMyLocation().longitude;\n  }\n\n  // componentDidMount() {\n  //   if(this.props.latitude===null && this.props.longitude===null) {\n  //     this.setLatLong();\n  //   }\n  //   if(this.props.latitude!==null && this.props.longitude!==null){\n  //     this.fetchDataByGeo(this.props.latitude,this.props.longitude);\n  //   }\n  // }\n  componentDidUpdate(prevProps) {\n    if (this.props.latitude !== prevProps.latitude || this.props.longitude !== prevProps.longitude) {\n      this.fetchDataByGeo(this.props.latitude, this.props.longitude);\n    }\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexport default WeatherData;","map":{"version":3,"sources":["/Users/uttamdarji/Desktop/weather/src/components/WeatherData/WeatherData.js"],"names":["React","location","latitude","longitude","WeatherData","Component","constructor","props","setLatLong","console","log","getMyLocation","window","navigator","geolocation","getCurrentPosition","position","coords","newData","data","fetchDataByGeo","url","fetch","then","results","json","wdata","componentDidUpdate","prevProps","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,QAAJ,EAAaC,QAAb,EAAsBC,SAAtB;;AACA,MAAMC,WAAN,SAA0BJ,KAAK,CAACK,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,UARmB,GAQN,MAAM;AACjB,WAAKD,KAAL,CAAWC,UAAX,CAAsBN,QAAtB,EAA+BC,SAA/B;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAO,KAAKH,KAAL,CAAWL,QAA9B;AACD,KAXkB;;AAAA,SAanBS,aAbmB,GAaH,MAAM;AACpB;AACA;AACA;AACA,UAAIC,MAAM,CAACC,SAAP,IAAoBD,MAAM,CAACC,SAAP,CAAiBC,WAAzC,EAAsD;AACpDb,QAAAA,QAAQ,GAAGW,MAAM,CAACC,SAAP,CAAiBC,WAA5B;AACD;;AACD,UAAIb,QAAJ,EAAa;AACXA,QAAAA,QAAQ,CAACc,kBAAT,CAA4B,UAAUC,QAAV,EAAoB;AAC9Cd,UAAAA,QAAQ,GAAIc,QAAQ,CAACC,MAAT,CAAgBf,QAA5B;AACAC,UAAAA,SAAS,GAAIa,QAAQ,CAACC,MAAT,CAAgBd,SAA7B;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;AACAO,UAAAA,OAAO,CAACC,GAAR,CAAYP,SAAZ;AACD,SALD;AAMA,eAAQ;AACND,UAAAA,QAAQ,EAAEA,QADJ;AAENC,UAAAA,SAAS,EAAEA;AAFL,SAAR;AAID,OAlBmB,CAmBpB;;AACD,KAjCkB;;AAAA,SAmCnBe,OAnCmB,GAmCRC,IAAD,IAAU;AAClB,WAAKZ,KAAL,CAAWW,OAAX,CAAmBC,IAAnB;AACD,KArCkB;;AAAA,SAuCnBC,cAvCmB,GAuCF,CAAClB,QAAD,EAAUC,SAAV,KAAwB;AACvC,YAAMkB,GAAG,GAAG,yDAAyDnB,QAAzD,GAAoE,OAApE,GAA8EC,SAA9E,GAA0F,yCAAtG;AACAmB,MAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,OAAO,IAAIA,OAAO,CAACC,IAAR,EADjB,EAECF,IAFD,CAEOG,KAAD,IAAW;AACf,aAAKR,OAAL,CAAaQ,KAAb;AACD,OAJD;AAKD,KA9CkB;;AAEjB,SAAKlB,UAAL,GAFiB,CAGjB;AACA;AACA;AACD;;AA0CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGAmB,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKrB,KAAL,CAAWL,QAAX,KAAwB0B,SAAS,CAAC1B,QAAlC,IAA8C,KAAKK,KAAL,CAAWJ,SAAX,KAAyByB,SAAS,CAACzB,SAArF,EAAgG;AAC9F,WAAKiB,cAAL,CAAoB,KAAKb,KAAL,CAAWL,QAA/B,EAAwC,KAAKK,KAAL,CAAWJ,SAAnD;AACD;AACF;;AAED0B,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AAnEuC;;AAsE1C,eAAezB,WAAf","sourcesContent":["import React from 'react';\n\nlet location,latitude,longitude;\nclass WeatherData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setLatLong();\n    //this.getMyLocation();\n    // this.latitude = this.getMyLocation().latitude;\n    // this.longitude = this.getMyLocation().longitude;\n  }\n\n  setLatLong = () => {\n    this.props.setLatLong(latitude,longitude);\n    console.log(typeof(this.props.latitude));\n  }\n\n  getMyLocation = () => {\n    // let location = null;\n    // let latitude = null;\n    // let longitude = null;\n    if (window.navigator && window.navigator.geolocation) {\n      location = window.navigator.geolocation\n    }\n    if (location){\n      location.getCurrentPosition(function (position) {\n        latitude = (position.coords.latitude);\n        longitude = (position.coords.longitude);\n        console.log(latitude);\n        console.log(longitude);\n      });\n      return ({\n        latitude: latitude,\n        longitude: longitude\n      });\n    }\n    //this.props.setLatLong(latitude,longitude);        \n  }\n\n  newData = (data) => {\n    this.props.newData(data);\n  }\n\n  fetchDataByGeo = (latitude,longitude) => {\n    const url = 'https://api.openweathermap.org/data/2.5/weather?lat=' + latitude + '&lon=' + longitude + '&appid=9b32cf97b04c03ad2e6f0960ea7bdce3';\n    fetch(url)\n    .then(results => results.json())\n    .then((wdata) => {\n      this.newData(wdata);\n    });\n  }\n\n  // componentDidMount() {\n  //   if(this.props.latitude===null && this.props.longitude===null) {\n  //     this.setLatLong();\n  //   }\n  //   if(this.props.latitude!==null && this.props.longitude!==null){\n  //     this.fetchDataByGeo(this.props.latitude,this.props.longitude);\n  //   }\n  // }\n \n\n  componentDidUpdate(prevProps) {\n    if (this.props.latitude !== prevProps.latitude || this.props.longitude !== prevProps.longitude) {\n      this.fetchDataByGeo(this.props.latitude,this.props.longitude);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default WeatherData;"]},"metadata":{},"sourceType":"module"}